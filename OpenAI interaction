import openai
import os
import random
import requests
import base64
from openai import OpenAI
import pandas as pd
import time 
#calling api keys
with open('api-keys-H.txt', 'r') as f:
    api_key = f.read().strip()
client = OpenAI(api_key=api_key)
#encoding images
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

## interaction with OpenAI
def process_row(row):
    image_file_name = row['Name']
    image_path = os.path.join(folder_path, image_file_name)
    base64_image = encode_image(image_path)

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    payload = {
        "model": "gpt-4-vision-preview",
        "messages": [{
            "role": "user",
            "content": [{
                "type": "text",
                "text": "A capsule wardrobe is a curated collection of versatile clothing and accessories that can be mixed and matched to create various outfits. It typically consists of timeless pieces that transcend trends, allowing for easy coordination and maximizing outfit options.Please provide a number of clothing visible on the photo and then list the items that could fit the capsule wardrobe idea. If none of the items on the photo fit the description of capsule wardrobe, write number of clothing visable on the photo and 'non' Use the following format:Number of items visible on the photo: [Number]Items that could be part of a capsule wardrobe: [Item 1, Item 2, ...]. Do not make additional comments"
            }, {
                "type": "image_url",
                "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}
            }]
        }],
        "max_tokens": 100
    }

    #sending request
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)

    #error handling
    if response.status_code != 200:
        print(f"API request failed with status code {response.status_code}.")
        print(response.content)
        return None

    
    try:
        answer = response.json()['choices'][0]['message']['content']
    except KeyError:
        print(f"JSON response does not contain the expected 'choices' key.")
        print(response.content)
        return None

    return (answer, row.name)

#applying
results = df_new.apply(process_row, axis=1)

#adding answer to the correct row
for answer, row_index in results:
    if answer is not None:
        df_new.at[row_index, 'answer'] = answer 
